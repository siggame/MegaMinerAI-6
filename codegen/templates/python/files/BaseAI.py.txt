# -*- python -*-

from library import library

class BaseAI:
  """@brief A basic AI interface.

  This class implements most the code an AI would need to interface with the lower-level game code.
  AIs should extend this class to get a lot of builer-plate code out of the way
  The provided AI class does just that.
  """
  initialized = False
  iteration = 0
  connection = None
% for model in models:
  ${lowercase(model.plural)} = []
% endfor

  def startTurn(self):
% for model in models:
%   if model.type == 'Model':
    from GameObject import ${model.name}
%   endif
% endfor

% for model in models:
%   if model.type == 'Model':
    BaseAI.${lowercase(model.plural)} = [${model.name}(library.get${model.name}(self.connection, i)) for i in xrange(library.get${model.name}Count(self.connection))]
%   endif
% endfor

    if not self.initialized:
      self.initialized = True
      self.init()
    BaseAI.iteration += 1;
    return self.run()
  
% for datum in globals:
  @staticmethod
  def ${datum.name}():
%   if datum.doc:
    """${datum.doc}
    """
%   endif
    return library.get${capitalize(datum.name)}(self.connection)

% endfor
  def __init__(self, connection):
    self.connection = connection